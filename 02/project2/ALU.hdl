// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a=x , b=false , sel=zx , out=zerox ); //zx - if x is 0 or not
    Not16(in=zerox , out=notx );                //not on the answer
    Mux16(a=zerox , b=notx , sel=nx , out=finalx ); //final answer between zero and !


    Mux16(a=y , b=false , sel=zy , out=zeroy ); //same for y
    Not16(in=zeroy , out=noty );
    Mux16(a= zeroy, b= noty, sel= ny , out=finaly );

    Add16(a = finalx , b = finaly, out = xaddy); //x & y
    And16(a= finalx , b= finaly, out= xandy);    //x + y

    Mux16(a=xandy , b=xaddy , sel=f , out=return ); //f chooses between & and +
    Not16(in=return , out=nreturn );                // ! for answer

    //chooses between final answer and ! answer, creates more data for ng and zr (surprisingly possible)
    Mux16(a=return , b=nreturn , sel=no , out[0..7]=l1, out[8..15]=l2, out[15]=lng, out=out);

    Or8Way(in=l1 , out=last1 ); //checks first half of final answer
    Or8Way(in=l2 , out=last2 ); //checks last half of final answer
    Or(a=last1 , b=last2 , out=last3 );  //answer for if final answer is 0 or no
    Mux(a=true , b=false , sel=last3 , out=zr ); //returns right value for zr

    Mux(a=false , b=true , sel=lng , out=ng ); //checks if <0 according to last bit (out[15])

   
    
    

    
    
    

        
}