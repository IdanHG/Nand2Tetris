// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Not(in=instruction[15] , out=notMSB );
    Or(a=notMSB , b=instruction[5] , out=cA ); //first C

    Mux16(a=instruction , b=Areg , sel=instruction[15] , out=inputA );
    ARegister(in=inputA , load=cA , out=A, out[0..14]=addressM);
    And(a=instruction[15] , b=instruction[12] , out=AorM ); //choose A or M
    Mux16(a=A , b=inM , sel=AorM , out=AM );
    And(a=instruction[15] , b=instruction[4] , out=toD ); //check if need to write in D
    DRegister(in=Dreg , load=toD , out=D );

    ALU(x=D , y=AM , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=Areg, out=Dreg, out=outM , zr=zr , ng=ng );
    And(a=instruction[3] , b=instruction[15] , out=writeM ); //only true if needs to write in M
    
    Not(in=ng , out=posORzr );
    Not(in=zr , out=notzr );
    And(a=posORzr , b=notzr , out=pos );
      
    And(a=instruction[15] , b=instruction[0] , out=JGT ); //first bit is for positive values
    And(a=JGT , b=pos , out=load1 );
    And(a=instruction[15] , b=instruction[1] , out=JEQ ); //second is for 0 values
    And(a=JEQ , b=zr , out=load2 );
    And(a=instruction[15] , b=instruction[2] , out=JLT ); //third is for negative vals
    And(a=JLT , b=ng , out=load3 );

    Or(a=load1 , b=load2 , out=load0 );
    Or(a=load3 , b=load0 , out=Jfunc ); //if one of the loads is 1 - pc should be overwritten
    
    PC(in=A , load=Jfunc , inc=true , reset=reset , out[0..14]=pc );
}

